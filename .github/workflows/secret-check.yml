#
# Copyright 2024-2025 the original author or authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
name: üóùÔ∏è Secrets Check

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  secret-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for secrets and sensitive information
        run: |
          echo "üîç Checking for secrets and sensitive information..."
          
          # Common secret patterns to check for
          SECRET_PATTERNS=(
            "password\s*=\s*['\"][^'\"]+['\"]"
            "secret\s*=\s*['\"][^'\"]+['\"]"
            "api[_-]?key\s*=\s*['\"][^'\"]+['\"]"
            "access[_-]?token\s*=\s*['\"][^'\"]+['\"]"
            "private[_-]?key\s*=\s*['\"][^'\"]+['\"]"
            "aws[_-]?access[_-]?key"
            "aws[_-]?secret[_-]?key"
            "github[_-]?token"
            "jwt[_-]?secret"
            "database[_-]?password"
            "db[_-]?password"
            "mysql[_-]?password"
            "postgres[_-]?password"
            "redis[_-]?password"
            "mongodb[_-]?password"
            "encryption[_-]?key"
            "signing[_-]?key"
            "auth[_-]?secret"
            "session[_-]?secret"
            "cookie[_-]?secret"
          )
          
          # Files to exclude from secret checking
          EXCLUDE_PATTERNS=(
            "node_modules/"
            ".git/"
            "target/"
            "dist/"
            "build/"
            ".github/workflows/"
            "*.log"
            "*.tmp"
            "*.temp"
            "h2-data/"
            "extensions/"
          )
          
          VIOLATIONS=()
          
          # Function to check if file should be excluded
          should_exclude() {
            local file="$1"
            for pattern in "${EXCLUDE_PATTERNS[@]}"; do
              if [[ "$file" == *"$pattern"* ]]; then
                return 0
              fi
            done
            return 1
          }
          
          # Find all relevant files
          echo "üìÅ Scanning files for secrets..."
          while IFS= read -r -d '' file; do
            if should_exclude "$file"; then
              continue
            fi
            
            # Check each pattern
            for pattern in "${SECRET_PATTERNS[@]}"; do
              if grep -qiE "$pattern" "$file" 2>/dev/null; then
                echo "‚ö†Ô∏è  Potential secret found in: $file"
                echo "   Pattern: $pattern"
                VIOLATIONS+=("$file:$pattern")
              fi
            done
          done < <(find . -type f \( -name "*.java" -o -name "*.js" -o -name "*.ts" -o -name "*.vue" -o -name "*.yml" -o -name "*.yaml" -o -name "*.properties" -o -name "*.xml" -o -name "*.json" -o -name "*.md" \) -print0)
          
          # Check for hardcoded credentials in specific file types
          echo "üîç Checking configuration files..."
          
          # Check application.yml and application-*.yml files
          for config_file in src/main/resources/application*.yml; do
            if [ -f "$config_file" ]; then
              if grep -qiE "(password|secret|key|token)\s*:\s*['\"][^'\"]+['\"]" "$config_file"; then
                echo "‚ö†Ô∏è  Potential hardcoded credentials in: $config_file"
                VIOLATIONS+=("$config_file:hardcoded-credentials")
              fi
            fi
          done
          
          # Check for common environment variable patterns that might contain secrets
          echo "üîç Checking for environment variable patterns..."
          if grep -r "process\.env\." . --include="*.js" --include="*.ts" --include="*.vue" 2>/dev/null | grep -v node_modules | grep -v ".git" | grep -E "(SECRET|PASSWORD|KEY|TOKEN)"; then
            echo "‚ö†Ô∏è  Found environment variable usage that might contain secrets"
            VIOLATIONS+=("env-vars:potential-secrets")
          fi
          
          # Report results
          if [ ${#VIOLATIONS[@]} -eq 0 ]; then
            echo "‚úÖ No secrets or sensitive information found!"
          else
            echo ""
            echo "üö® SECRETS DETECTED!"
            echo "=================="
            echo ""
            echo "The following potential secrets were found:"
            echo ""
            for violation in "${VIOLATIONS[@]}"; do
              echo "  - $violation"
            done
            echo ""
            echo "## üîí Security Recommendations:"
            echo ""
            echo "1. **Never commit secrets to version control**"
            echo "2. **Use environment variables** for sensitive data:"
            echo "   ```yaml"
            echo "   password: \${DB_PASSWORD:defaultPassword}"
            echo "   ```"
            echo ""
            echo "3. **Use external secret management** (e.g., HashiCorp Vault, AWS Secrets Manager)"
            echo ""
            echo "4. **Use .env files** (and add them to .gitignore):"
            echo "   ```bash"
            echo "   echo '.env' >> .gitignore"
            echo "   ```"
            echo ""
            echo "5. **Use GitHub Secrets** for CI/CD pipelines"
            echo ""
            echo "Please remove or properly secure these secrets before committing."
            exit 1
          fi
